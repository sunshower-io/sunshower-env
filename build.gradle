

/**
 * Buildscript Plugins Section
 *
 * @author haswell
 */
buildscript {
    apply from: 'gradle/buildscript.gradle', to: buildscript
}


allprojects {
    apply plugin: 'java'
}

/**
 * Subproject configurations
 */

subprojects {

    group='io.hasli.test'
    version = rootProject.version

    apply plugin: 'nebula.optional-base'
    apply plugin: 'nebula.provided-base'
    apply from: "$rootDir/gradle/dependencies.gradle"
    apply from: "$rootDir/gradle/idea.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"
    apply from: "$rootDir/gradle/test.gradle"

    dependencies {
        provided('org.apache.logging.log4j:log4j-api')
        provided('org.apache.logging.log4j:log4j-core')
        provided('org.jboss.spec:jboss-javaee-7.0')
        compile('org.junit.jupiter:junit-jupiter-engine')
        compile('org.junit.vintage:junit-vintage-engine')

        [
                'orm',
                'context'
        ].each{
            provided("org.springframework:spring-$it")
        }

        provided('org.springframework:spring-context')
        [
                'core',
                'config',
                'acl',
                'crypto',
                'aspects',
                'ldap'
        ].each {
            provided("org.springframework.security:spring-security-$it")
        }
        provided group: 'org.eclipse.persistence', name: 'org.eclipse.persistence.moxy'

        testCompile("org.springframework:spring-test")
        testCompile("org.springframework.security:spring-security-test")
    }


}

task prepareForRelease() {
    doLast {
        def flagged = []
        def pom = new XmlSlurper().parse("$rootDir/bom/imported/pom.xml")

        pom.properties.'*'*.name().each { dep ->
            if (pom.properties."${dep}" =~ "FEATURE") {
                flagged.add("$dep --> ${pom.properties."${dep}"}")
            }
        }

        if (!flagged.isEmpty()) {
            throw new org.gradle.api.GradleException("Found FEATURE versions while preparing for release, please " +
                    "release the following components and update the project dependencies in bom/imported/pom.xml: \n\n" +
                    "${flagged.join("\n")}"
            )
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = gradleWrapperVersion
}

apply from: "$rootDir/gradle/bom.gradle"

defaultTasks "installBillOfMaterials", "clean", "build"
